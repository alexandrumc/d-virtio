KDIR=$(shell realpath $(PWD)/../..)
D_SRC=$(shell realpath $(PWD)/../../drivers/net/dfiles)
TEST_PATH=$(shell realpath $(PWD)/../../drivers/net/dfiles/test.sh)
LABS?=$(shell cd templates && find -mindepth 1 -maxdepth 1 -type d)
MODS=$(shell cd templates && find $(LABS) -mindepth 1 -name Kbuild | xargs dirname)
TODO?=0
ARCH=x86_64

include qemu/Makefile

run: copy
	sudo iptables -t nat -A POSTROUTING -o enp2s0 -j MASQUERADE
	sudo sysctl -w net.ipv4.ip_forward=1
	$(MAKE) boot ARCH=$(ARCH)
	
build: $(KCONFIG) skels/Kbuild
	$(MAKE) -C $(D_SRC)
	$(MAKE) -C $(KDIR)  ARCH=$(ARCH) modules

TEMPDIR := $(shell mktemp -u)

skels/Kbuild:
	mkdir -p skels
	echo "# autogenerated, do not edit " > $@
	echo "ccflags-y += -Wno-unused-function -Wno-unused-label -Wno-unused-variable " >> $@
	for i in $(shell cd skels && find -mindepth 1 -name Kbuild | xargs dirname); do echo "obj-m += $$i/" >> $@; done


copy: build $(YOCTO_IMAGE)
	if  [ -e qemu.mon ]; then exit 1; fi
	mv ../../drivers/net/virtio_net_tmp.ko skels
	cp ../../drivers/net/dfiles/test.sh skels
	mkdir $(TEMPDIR)
	sudo mount -t ext4 -o loop $(YOCTO_IMAGE) $(TEMPDIR)
	find skels -type f \( -name *.ko -or -executable \)
	find skels -type f \( -name *.ko -or -executable \) | xargs sudo cp --parents -t $(TEMPDIR)/home/root || true
	find skels -type d \( -name checker \) | xargs sudo cp -r --parents -t $(TEMPDIR)/home/root || true
	sudo umount $(TEMPDIR)
	rmdir $(TEMPDIR)

docs:
	pip install --user -r requirements.txt
	$(MAKE) -C $(KDIR) DOCBOOKS= SPHINXDIRS="teaching" htmldocs
	#$(MAKE) -C $(KDIR) BUILDDIR=$(KDIR)/Documentation/output/slides DOCBOOKS= SPHINXDIRS="teaching" slides
	#for i in $(KDIR)/Documentation/output/slides/teaching/lectures/*.html; do name=$$(basename $$i .html); cp $$i $(KDIR)/Documentation/output/teaching/lectures/$$name-slides.html; done
	#cp -r $(KDIR)/Documentation/output/slides/teaching/_static $(KDIR)/Documentation/output/teaching/
clean::
	rm -rf skels
	$(MAKE) -C $(D_SRC) clean

.PHONY: skels
